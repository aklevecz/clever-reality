[{"C:\\Users\\ariel\\orb-stream\\src\\App.js":"1","C:\\Users\\ariel\\orb-stream\\src\\services.js":"2","C:\\Users\\ariel\\orb-stream\\src\\VidjuRoom.js":"3","C:\\Users\\ariel\\orb-stream\\src\\index.js":"4","C:\\Users\\ariel\\orb-stream\\src\\ThreeWorld.js":"5","C:\\Users\\ariel\\orb-stream\\src\\ArtistStream.js":"6","C:\\Users\\ariel\\orb-stream\\src\\shaders\\screen-fragment.js":"7","C:\\Users\\ariel\\orb-stream\\src\\shaders\\screen-vertex.js":"8","C:\\Users\\ariel\\orb-stream\\src\\ThreeFuncs.js":"9","C:\\Users\\ariel\\orb-stream\\src\\PressStart.js":"10","C:\\Users\\ariel\\orb-stream\\src\\StreamControls.js":"11","C:\\Users\\ariel\\orb-stream\\src\\Volume.js":"12"},{"size":179,"mtime":1609810875575,"results":"13","hashOfConfig":"14"},{"size":2364,"mtime":1609657941698,"results":"15","hashOfConfig":"14"},{"size":2096,"mtime":1609743932890,"results":"16","hashOfConfig":"14"},{"size":197,"mtime":1609810870589,"results":"17","hashOfConfig":"14"},{"size":12331,"mtime":1609905462240,"results":"18","hashOfConfig":"14"},{"size":2500,"mtime":1609905148834,"results":"19","hashOfConfig":"14"},{"size":640,"mtime":1609649423817,"results":"20","hashOfConfig":"14"},{"size":231,"mtime":1609632371049,"results":"21","hashOfConfig":"14"},{"size":5116,"mtime":1609892956232,"results":"22","hashOfConfig":"14"},{"size":619,"mtime":1609809531392,"results":"23","hashOfConfig":"14"},{"size":1099,"mtime":1609905219007,"results":"24","hashOfConfig":"14"},{"size":1198,"mtime":1609893394989,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"1jzspd9",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"C:\\Users\\ariel\\orb-stream\\src\\App.js",["57"],"import React from \"react\";\nimport \"./index.scss\";\nimport ThreeWorld from \"./ThreeWorld\";\n\nexport default function () {\n  return (\n    <div>\n      <ThreeWorld />\n    </div>\n  );\n}\n",["58","59"],"C:\\Users\\ariel\\orb-stream\\src\\services.js",[],"C:\\Users\\ariel\\orb-stream\\src\\VidjuRoom.js",[],"C:\\Users\\ariel\\orb-stream\\src\\index.js",[],["60","61"],"C:\\Users\\ariel\\orb-stream\\src\\ThreeWorld.js",["62","63","64","65"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport { PointerLockControls } from \"three/examples/jsm/controls/PointerLockControls\";\r\nimport ArtistStream from \"./ArtistStream\";\r\nimport PressStart from \"./PressStart\";\r\nimport {\r\n  CAMERA_START,\r\n  collisionObjects,\r\n  createFloor,\r\n  createLight,\r\n  createOrb,\r\n  createScreen,\r\n  lerp,\r\n  mouse,\r\n  orbs,\r\n  ray,\r\n  scene,\r\n  startButton,\r\n  stats,\r\n} from \"./ThreeFuncs\";\r\n\r\nconst test = false;\r\n\r\nexport default function ThreeWorld() {\r\n  const [phase, setPhase] = useState(0);\r\n  const worldContainerRef = useRef(undefined);\r\n  const videoRef = useRef(undefined);\r\n\r\n  useEffect(() => {\r\n    if (phase === 1) {\r\n    }\r\n  }, [phase]);\r\n\r\n  useEffect(() => {\r\n    if (worldContainerRef.current === undefined) return;\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    const { x, y, z } = CAMERA_START;\r\n    camera.position.set(x, y, z);\r\n    camera.lookAt(0, 0, 0);\r\n    var controls;\r\n    // CONTROLS\r\n    // ORBIT\r\n    // const controls = new OrbitControls(camera, worldContainerRef.current);\r\n    // controls.maxPolarAngle = Math.PI / 2;\r\n    // POINTER\r\n    var moveForward = false,\r\n      moveBackward = false,\r\n      moveLeft = false,\r\n      moveRight = false;\r\n    const velocity = new THREE.Vector3();\r\n    const direction = new THREE.Vector3();\r\n    const setupPointerControls = () => {\r\n      controls = new PointerLockControls(camera, worldContainerRef.current);\r\n      worldContainerRef.current.addEventListener(\"click\", () =>\r\n        controls.lock()\r\n      );\r\n      scene.add(controls.getObject());\r\n\r\n      function onKeyDown(e) {\r\n        switch (e.key) {\r\n          case \"w\":\r\n            moveForward = true;\r\n            break;\r\n          case \"a\":\r\n            moveLeft = true;\r\n            break;\r\n          case \"s\":\r\n            moveBackward = true;\r\n            break;\r\n          case \"d\":\r\n            moveRight = true;\r\n            break;\r\n          case \" \":\r\n            if (canJump) velocity.y += 200;\r\n            canJump = false;\r\n            break;\r\n        }\r\n      }\r\n      function onKeyUp(e) {\r\n        switch (e.key) {\r\n          case \"w\":\r\n            moveForward = false;\r\n            break;\r\n          case \"a\":\r\n            moveLeft = false;\r\n            break;\r\n          case \"s\":\r\n            moveBackward = false;\r\n            break;\r\n          case \"d\":\r\n            moveRight = false;\r\n            break;\r\n        }\r\n      }\r\n\r\n      document.addEventListener(\"keydown\", onKeyDown, false);\r\n      document.addEventListener(\"keyup\", onKeyUp, false);\r\n    };\r\n\r\n    // END OF CONTROLS SETUP\r\n\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setClearColor(new THREE.Color(1.0, 1.0, 1.0));\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\r\n    worldContainerRef.current.appendChild(renderer.domElement);\r\n    // worldContainerRef.current.appendChild(stats.dom);\r\n    const startButtonObject = startButton();\r\n    createFloor();\r\n    createLight();\r\n\r\n    function mouseVector(e) {\r\n      const coords = { x: 0, y: 0 };\r\n      if (e instanceof TouchEvent) {\r\n        coords.x = e.touches[0].clientX;\r\n        coords.y = e.touches[0].clientY;\r\n      } else {\r\n        coords.x = e.clientX;\r\n        coords.y = e.clientY;\r\n      }\r\n      mouse.x = (coords.x / window.innerWidth) * 2 - 1;\r\n      mouse.y = -(coords.y / window.innerHeight) * 2 + 1;\r\n    }\r\n\r\n    worldContainerRef.current.addEventListener(\"touchstart\", checkClick, true);\r\n    worldContainerRef.current.addEventListener(\"click\", checkClick, true);\r\n\r\n    var analyser;\r\n    var dataArray;\r\n    const setupAudioContext = () => {\r\n      if (navigator.platform === \"iPhone\" || navigator.platform === \"Android\")\r\n        return;\r\n      var audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n      analyser = audioCtx.createAnalyser();\r\n      var source = audioCtx.createMediaElementSource(videoRef.current);\r\n      source.connect(analyser);\r\n      source.connect(audioCtx.destination);\r\n      analyser.fftSize = 512;\r\n      var bufferLength = analyser.frequencyBinCount;\r\n      dataArray = new Uint8Array(bufferLength);\r\n    };\r\n\r\n    var started = false;\r\n    var clickAnimationRunning = false;\r\n    function checkClick(e) {\r\n      mouseVector(e);\r\n      ray.setFromCamera(mouse, camera);\r\n      const intersections = ray.intersectObjects([startButtonObject]);\r\n      if (intersections.length > 0) {\r\n        // controls.autoRotate = true;\r\n        setupAudioContext();\r\n        videoRef.current.play();\r\n        if (!clickAnimationRunning) {\r\n          clickAnimationRunning = true;\r\n          const start = performance.now();\r\n          const currentColor = startButtonObject.material.color;\r\n          var frame;\r\n          const buttonAnimation = () => {\r\n            const now = (performance.now() - start) * 0.001;\r\n\r\n            startButtonObject.material.color.set(\r\n              currentColor.lerp(new THREE.Color(0, 0, 1), now)\r\n            );\r\n\r\n            startButtonObject.material.opacity = lerp(now - 1, 1, 0);\r\n\r\n            setPhase(1);\r\n            if (now > 2) {\r\n              started = true;\r\n              setupPointerControls();\r\n              try {\r\n                controls.lock();\r\n              } catch (err) {\r\n                // Simulate pointer lock to start falling\r\n                controls.isLocked = true;\r\n              }\r\n\r\n              createOrb({ n: 1000 });\r\n\r\n              return cancelAnimationFrame(frame);\r\n            }\r\n            frame = requestAnimationFrame(buttonAnimation);\r\n          };\r\n          buttonAnimation();\r\n        }\r\n      }\r\n      worldContainerRef.current.removeEventListener(\r\n        \"touchstart\",\r\n        checkClick,\r\n        true\r\n      );\r\n      worldContainerRef.current.removeEventListener(\"click\", checkClick, true);\r\n    }\r\n\r\n    document.addEventListener(\"touchstart\", handleTouchStart, false);\r\n    document.addEventListener(\"touchend\", handleTouchEnd, false);\r\n    document.addEventListener(\"touchmove\", handleTouchMove, false);\r\n\r\n    var xDown = null;\r\n    var yDown = null;\r\n\r\n    function getTouches(evt) {\r\n      return (\r\n        evt.touches || // browser API\r\n        evt.originalEvent.touches\r\n      ); // jQuery\r\n    }\r\n\r\n    const rotateStart = new THREE.Vector2();\r\n    var looking = false;\r\n    function handleTouchStart(evt) {\r\n      const firstTouch = getTouches(evt)[0];\r\n      xDown = firstTouch.clientX;\r\n      yDown = firstTouch.clientY;\r\n      looking = true;\r\n      rotateStart.set(evt.touches[0].clientX, evt.touches[0].clientY);\r\n    }\r\n\r\n    const rotateEnd = new THREE.Vector2();\r\n    const rotateDelta = new THREE.Vector2();\r\n    var phi = 0;\r\n    var theta = (1 * Math.PI) / 180;\r\n    function handleTouchMove(evt) {\r\n      rotateEnd.set(evt.touches[0].clientX, evt.touches[0].clientY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n      rotateStart.copy(rotateEnd);\r\n      phi =\r\n        phi +\r\n        ((2 * Math.PI * rotateDelta.y) / renderer.domElement.height) * 0.3;\r\n      theta +=\r\n        ((2 * Math.PI * rotateDelta.x) / renderer.domElement.width) * 0.5;\r\n      if (!xDown || !yDown) {\r\n        return;\r\n      }\r\n      var xUp = evt.touches[0].clientX;\r\n      var yUp = evt.touches[0].clientY;\r\n\r\n      var xDiff = xDown - xUp;\r\n      var yDiff = yDown - yUp;\r\n\r\n      if (Math.abs(xDiff) > Math.abs(yDiff)) {\r\n        /*most significant*/\r\n        if (xDiff > 0) {\r\n          /* left swipe */\r\n          // look(evt);\r\n        } else {\r\n          /* right swipe */\r\n          // look(evt);\r\n        }\r\n      } else {\r\n        if (yDiff > 0) {\r\n          /* up swipe */\r\n          moveBackward = true;\r\n        } else {\r\n          /* down swipe */\r\n          moveForward = true;\r\n        }\r\n      }\r\n      /* reset values */\r\n      xDown = null;\r\n      yDown = null;\r\n    }\r\n\r\n    function handleTouchEnd(evt) {\r\n      moveForward = false;\r\n      moveBackward = false;\r\n      looking = false;\r\n    }\r\n\r\n    var scope = {};\r\n    scope.minPolarAngle = 0;\r\n    scope.maxPolarAngle = Math.PI;\r\n    var euler = new THREE.Euler(0, 0, 0, \"YXZ\");\r\n\r\n    const bbox = new THREE.Box3();\r\n    let frame;\r\n    var canJump = true;\r\n    var prevTime;\r\n    var orientation = new THREE.Quaternion();\r\n    var previousPhi;\r\n    var previousTheta;\r\n    function animate() {\r\n      frame = requestAnimationFrame(animate);\r\n\r\n      if (phi === previousPhi && theta === previousTheta) {\r\n      } else if (started) {\r\n        previousPhi = phi;\r\n        previousTheta = theta;\r\n        euler.set(phi, theta, 0, \"YXZ\");\r\n        orientation.setFromEuler(euler);\r\n        camera.quaternion.copy(orientation);\r\n      }\r\n\r\n      // camera.position.x = radius * Math.cos(angle);\r\n      // camera.position.z = radius * Math.sin(angle);\r\n      // POINTER CONTROLS MOVEMENTS\r\n      const time = performance.now();\r\n      if (controls && controls.isLocked) {\r\n        direction.z = Number(moveForward) - Number(moveBackward);\r\n        direction.x = Number(moveRight) - Number(moveLeft);\r\n        direction.normalize(); // this ensures consistent movements in all directions\r\n\r\n        const delta = (time - prevTime) / 1000;\r\n        velocity.x -= velocity.x * 10.0 * delta;\r\n        velocity.z -= velocity.z * 10.0 * delta;\r\n\r\n        // find intersections\r\n        const controlObject = controls.getObject();\r\n        const oldPosition = new THREE.Vector3();\r\n        oldPosition.copy(controlObject.position);\r\n\r\n        velocity.y -= 9.8 * 100.0 * delta; // 100.0 = mass\r\n\r\n        if (moveForward || moveBackward)\r\n          velocity.z -= direction.z * 400.0 * delta;\r\n        if (moveLeft || moveRight) velocity.x -= direction.x * 400.0 * delta;\r\n\r\n        controls.moveRight(-velocity.x * delta);\r\n        controls.moveForward(-velocity.z * delta);\r\n\r\n        const sphere = new THREE.Sphere(controlObject.position, 2);\r\n\r\n        // intersection\r\n        if (collisionObjects.length > 0) {\r\n          const object = collisionObjects[0];\r\n          object.geometry.computeBoundingBox();\r\n          bbox\r\n            .copy(object.geometry.boundingBox)\r\n            .applyMatrix4(object.matrixWorld);\r\n          const intersections = sphere.intersectsBox(bbox);\r\n          if (intersections) {\r\n            velocity.y = Math.max(0, velocity.y);\r\n            if (controls.getObject().position.y === 0)\r\n              controlObject.position.copy(oldPosition);\r\n            canJump = true;\r\n          }\r\n        }\r\n        controls.getObject().position.y += velocity.y * delta; // new behavior\r\n        if (controls.getObject().position.y < 0) {\r\n          velocity.y = 0;\r\n          controls.getObject().position.y = 0;\r\n\r\n          canJump = true;\r\n        }\r\n      }\r\n      prevTime = time;\r\n\r\n      // END OF POINTER CONTROLS MOVEMENTS\r\n\r\n      if (analyser) {\r\n        analyser.getByteFrequencyData(dataArray);\r\n      }\r\n      for (let i = 0; i < orbs.length; i++) {\r\n        orbs[i].rotation.y += 0.01;\r\n        const wave = Math.sin(time * 0.001 + i);\r\n        orbs[i].scale.set(wave, wave, wave);\r\n        if (analyser) {\r\n          const d = dataArray[i % 256] / 100;\r\n          orbs[i].scale.set(d, d, d);\r\n        }\r\n      }\r\n\r\n      renderer.render(scene, camera);\r\n      stats.update();\r\n      //controls.update();\r\n    }\r\n    animate();\r\n\r\n    const onWindowResize = () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n\r\n    window.addEventListener(\"resize\", onWindowResize, false);\r\n\r\n    return () => {\r\n      cancelAnimationFrame(frame);\r\n      window.removeEventListener(\"resize\", onWindowResize, false);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ width: \"100%\", height: \"100%\" }} ref={worldContainerRef}>\r\n      <PressStart phase={phase} />\r\n      <ArtistStream\r\n        createScreen={createScreen}\r\n        phase={phase}\r\n        videoRef={videoRef}\r\n        test={test}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n",["66","67"],"C:\\Users\\ariel\\orb-stream\\src\\ArtistStream.js",[],"C:\\Users\\ariel\\orb-stream\\src\\shaders\\screen-fragment.js",["68"],"const fragmentShader = `\r\nuniform vec4 resolution;\r\nuniform sampler2D videoTexture;\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n    vec2 newUV = (vUv - vec2(0.5)) * resolution.xy + vec2(.5);\r\n    vec4 tex = texture2D(videoTexture, newUV);\r\n    gl_FragColor = tex;\r\n}`;\r\n\r\nconst fshader = `\r\nvarying vec2 vUv;\r\n\r\nuniform sampler2D videoTexture;\r\nuniform vec2 resolution;\r\n\r\nvoid main()\r\n{\r\n  vec2 uv = vec2(0.5) + vUv * resolution.xy - resolution.xy*0.5;\r\n  vec4 color = vec4(0.);\r\n  if (uv.x>=0.0 && uv.y>=0.0 && uv.x<1.0 && uv.y<1.0) color = vec4(texture2D(videoTexture, uv).rgb, 1.0);\r\n  gl_FragColor = color;\r\n}\r\n`;\r\n\r\nexport default fshader;\r\n","C:\\Users\\ariel\\orb-stream\\src\\shaders\\screen-vertex.js",[],"C:\\Users\\ariel\\orb-stream\\src\\ThreeFuncs.js",["69"],"C:\\Users\\ariel\\orb-stream\\src\\PressStart.js",["70"],"C:\\Users\\ariel\\orb-stream\\src\\StreamControls.js",[],"C:\\Users\\ariel\\orb-stream\\src\\Volume.js",["71"],"import React, { useEffect, useRef } from \"react\";\r\nexport default function Volume({ changeVolume }) {\r\n  const canvasRef = useRef();\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const { width: w, height: h } = canvas;\r\n    ctx.rect(0, 0, w, h);\r\n    ctx.fillStyle = \"#00ffb1\";\r\n    ctx.fill();\r\n\r\n    let up = true;\r\n    canvas.onmousedown = (e) => {\r\n      up = false;\r\n    };\r\n\r\n    canvas.ontouchstart = () => (up = false);\r\n\r\n    const changeBar = (e) => {\r\n      if (!up) {\r\n        var rect = canvas.getBoundingClientRect();\r\n        const ctx = canvas.getContext(\"2d\");\r\n        const x = e.touches ? e.touches[0].clientX : e.clientX;\r\n        const coords = { x: x - rect.left };\r\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        ctx.beginPath();\r\n        ctx.rect(0, 0, coords.x, h);\r\n        ctx.fill();\r\n        changeVolume(coords.x / ctx.canvas.width);\r\n      }\r\n    };\r\n\r\n    canvas.onmousemove = changeBar;\r\n    canvas.ontouchmove = changeBar;\r\n\r\n    document.onmouseup = () => (up = true);\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"volume\">\r\n      <canvas ref={canvasRef} />\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"72","severity":1,"message":"73","line":5,"column":1,"nodeType":"74","endLine":11,"endColumn":2},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"75","replacedBy":"79"},{"ruleId":"77","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":3,"column":10,"nodeType":"83","messageId":"84","endLine":3,"endColumn":23},{"ruleId":"85","severity":1,"message":"86","line":66,"column":9,"nodeType":"87","messageId":"88","endLine":83,"endColumn":10},{"ruleId":"85","severity":1,"message":"86","line":86,"column":9,"nodeType":"87","messageId":"88","endLine":99,"endColumn":10},{"ruleId":"81","severity":1,"message":"89","line":276,"column":7,"nodeType":"83","messageId":"84","endLine":276,"endColumn":14},{"ruleId":"75","replacedBy":"90"},{"ruleId":"77","replacedBy":"91"},{"ruleId":"81","severity":1,"message":"92","line":1,"column":7,"nodeType":"83","messageId":"84","endLine":1,"endColumn":21},{"ruleId":"81","severity":1,"message":"93","line":2,"column":10,"nodeType":"83","messageId":"84","endLine":2,"endColumn":13},{"ruleId":"94","severity":1,"message":"95","line":21,"column":6,"nodeType":"96","endLine":21,"endColumn":13,"suggestions":"97"},{"ruleId":"94","severity":1,"message":"98","line":37,"column":6,"nodeType":"96","endLine":37,"endColumn":8,"suggestions":"99"},"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-native-reassign",["100"],"no-negated-in-lhs",["101"],["100"],["101"],"no-unused-vars","'OrbitControls' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'looking' is assigned a value but never used.",["100"],["101"],"'fragmentShader' is assigned a value but never used.","'GUI' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'styles'. Either include it or remove the dependency array. You can also do a functional update 'setStyles(s => ...)' if you only need 'styles' in the 'setStyles' call.","ArrayExpression",["102"],"React Hook useEffect has a missing dependency: 'changeVolume'. Either include it or remove the dependency array. If 'changeVolume' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["103"],"no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},"Update the dependencies array to be: [phase, styles]",{"range":"108","text":"109"},"Update the dependencies array to be: [changeVolume]",{"range":"110","text":"111"},[509,516],"[phase, styles]",[1100,1102],"[changeVolume]"]