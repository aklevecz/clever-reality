{"version":3,"sources":["shaders/screen-vertex.js","shaders/screen-fragment.js","fire.mp4","ThreeFuncs.js","Volume.js","StreamControls.js","ArtistStream.js","CtaSoundOverlay.js","ThreeWorld.js","App.js","index.js"],"names":["vertexShader","fshader","randomI","max","Math","floor","random","CAMERA_START","orbGeoRef","THREE","scene","stats","Stats","ray","mouse","orbs","collisionObjects","createScreen","video","require","default","fragmentShader","videoTexture","geometry","material","uniforms","resolution","value","transparent","depthWrite","depthTest","mesh","position","z","y","add","backGeo","backMaterial","color","backMesh","castShadow","push","r","createOrb","document","querySelector","n","i","rColor","x","set","rotation","PI","vId","id","replace","Volume","changeVolume","canvasRef","useRef","useEffect","canvas","current","ctx","getContext","w","width","h","height","rect","fillStyle","fill","up","onmousedown","e","ontouchstart","changeBar","getBoundingClientRect","coords","touches","clientX","left","clearRect","beginPath","onmousemove","ontouchmove","onmouseup","ref","StreamControls","videoRef","isPlaying","isMuted","toggleMute","setupAudioContext","onClick","currentTime","seekable","end","pause","play","navigator","platform","volume","min","val","url","ArtistStream","phase","test","muteOverride","useState","loading","setLoading","retryCounter","setRetryCounter","setIsPlaying","setIsMuted","initStream","useCallback","a","fetch","then","d","status","source","Hls","isSupported","hls","loadSource","attachMedia","src","incrementCounter","setTimeout","fire","onplay","onpause","muted","className","crossOrigin","playsInline","autoPlay","loop","controls","CtaSoundOverlay","setPhase","styles","setStyles","marginLeft","marginTop","opacity","style","transition","userSelect","SoundIcon","xmlns","viewBox","NoSoundIcon","analyser","dataArray","ThreeWorld","setMuteOverride","worldContainerRef","undefined","lock","isLocked","err","console","log","audioCtx","window","AudioContext","webkitAudioContext","createAnalyser","createMediaElementSource","connect","destination","fftSize","bufferLength","frequencyBinCount","Uint8Array","removeEventListener","camera","innerWidth","innerHeight","lookAt","moveForward","moveBackward","moveLeft","moveRight","velocity","direction","renderer","setClearColor","setSize","setPixelRatio","devicePixelRatio","shadowMap","enabled","type","appendChild","domElement","startButtonObject","name","buttonState","widthSegments","heightSegments","startButton","rotateX","toNonIndexed","receiveShadow","createFloor","light","target","shadow","mapSize","near","far","right","top","bottom","createLight","addEventListener","checkClick","started","clickAnimationRunning","evt","firstTouch","originalEvent","getTouches","xDown","yDown","clientY","rotateStart","rotateEnd","rotateDelta","subVectors","copy","phi","theta","xUp","yUp","xDiff","yDiff","abs","scope","maxPolarAngle","frame","prevTime","previousPhi","previousTheta","euler","bbox","canJump","orientation","animate","requestAnimationFrame","setFromEuler","quaternion","time","performance","now","Number","normalize","delta","controlObject","getObject","oldPosition","sphere","length","object","computeBoundingBox","boundingBox","applyMatrix4","matrixWorld","intersectsBox","getByteFrequencyData","wave","sin","scale","render","update","onWindowResize","aspect","updateProjectionMatrix","cancelAnimationFrame","TouchEvent","mouseVector","setFromCamera","intersectObjects","start","currentColor","buttonAnimation","lerp","b","PointerLockControls","key","App","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ec0693a5.chunk.js","sourcesContent":["const vertexShader = `\r\nvarying vec2 vUv;\r\nvoid main() {\r\n    vUv = uv;\r\n\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    //gl_Position = vec4(position, 1.0);\r\n}`;\r\n\r\nexport default vertexShader;\r\n","const fragmentShader = `\r\nuniform vec4 resolution;\r\nuniform sampler2D videoTexture;\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n    vec2 newUV = (vUv - vec2(0.5)) * resolution.xy + vec2(.5);\r\n    vec4 tex = texture2D(videoTexture, newUV);\r\n    gl_FragColor = tex;\r\n}`;\r\n\r\nconst fshader = `\r\nvarying vec2 vUv;\r\n\r\nuniform sampler2D videoTexture;\r\nuniform vec2 resolution;\r\n\r\nvoid main()\r\n{\r\n  vec2 uv = vec2(0.5) + vUv * resolution.xy - resolution.xy*0.5;\r\n  vec4 color = vec4(0.);\r\n  if (uv.x>=0.0 && uv.y>=0.0 && uv.x<1.0 && uv.y<1.0) color = vec4(texture2D(videoTexture, uv).rgb, 1.0);\r\n  gl_FragColor = color;\r\n}\r\n`;\r\n\r\nexport default fshader;\r\n","export default __webpack_public_path__ + \"static/media/fire.5b252a8b.mp4\";","import * as THREE from \"three\";\r\nimport Stats from \"three/examples/jsm/libs/stats.module.js\";\r\n\r\nconst randomI = (max) => Math.floor(Math.random() * max);\r\n\r\nexport const lerp = (x, a, b) => {\r\n  return x * (b - a) + a;\r\n};\r\n\r\nconst randomColor = () =>\r\n  new THREE.Color(\r\n    `rgb(${randomI(255) + 20}, ${randomI(255) + 20}, ${randomI(255) + 20})`\r\n  );\r\nconst gVideo = () => document.querySelector(\"#master\");\r\n\r\nexport const CAMERA_START = { x: 0, y: 20, z: 50 };\r\n\r\nconst orbGeoRef = new THREE.SphereGeometry(1, 30, 30);\r\nexport const scene = new THREE.Scene();\r\nexport const stats = new Stats();\r\nexport const ray = new THREE.Raycaster();\r\nexport const mouse = new THREE.Vector2(9999, 9999);\r\nexport var orbs = [];\r\nexport var collisionObjects = [];\r\n\r\nexport const startButton = () => {\r\n  const geometry = new THREE.SphereGeometry(1, 20, 20);\r\n  const material = new THREE.MeshPhysicalMaterial({\r\n    color: new THREE.Color(1, 0, 0),\r\n    transparent: true,\r\n  });\r\n  const mesh = new THREE.Mesh(geometry, material);\r\n  mesh.name = \"start-button\";\r\n  const { x, y, z } = CAMERA_START;\r\n  const buttonState = {\r\n    x,\r\n    y: y - 2,\r\n    z: z - 5,\r\n    widthSegments: 1,\r\n    heightSegments: 1,\r\n  };\r\n  mesh.position.set(buttonState.x, buttonState.y, buttonState.z);\r\n  scene.add(mesh);\r\n  // if (gui) {\r\n  //   const folder = gui.addFolder(\"Start Button\");\r\n  //   folder\r\n  //     .add(buttonState, \"x\", -20, 20, 0.1)\r\n  //     .onChange((e) => (mesh.position.x = e));\r\n  //   folder\r\n  //     .add(buttonState, \"y\", -20, 20, 0.1)\r\n  //     .onChange((e) => (mesh.position.y = e));\r\n  //   folder\r\n  //     .add(buttonState, \"z\", buttonState.z - 20, buttonState.z + 20, 0.1)\r\n  //     .onChange((e) => (mesh.position.z = e));\r\n  // }\r\n  return mesh;\r\n};\r\n\r\nexport const createFloor = () => {\r\n  var geometry = new THREE.PlaneBufferGeometry(200, 200, 100, 100);\r\n  geometry.rotateX(-Math.PI / 2);\r\n  geometry = geometry.toNonIndexed();\r\n  const material = new THREE.MeshStandardMaterial({ color: \"white\" });\r\n  const mesh = new THREE.Mesh(geometry, material);\r\n  mesh.position.y = -2;\r\n  mesh.receiveShadow = true;\r\n  mesh.castShadow = true;\r\n  mesh.name = \"floor\";\r\n  scene.add(mesh);\r\n};\r\n\r\nexport const createLight = () => {\r\n  const color = 0xffffff;\r\n  const intensity = 1.9;\r\n  const light = new THREE.DirectionalLight(color, intensity, 100);\r\n  light.position.set(0, 70, 30);\r\n  light.target.position.set(0, 0, -10);\r\n  light.castShadow = true;\r\n  light.shadow.mapSize.width = 2048;\r\n  light.shadow.mapSize.height = 2048;\r\n  light.shadow.camera.near = 0.5;\r\n  light.shadow.camera.far = 500;\r\n  const shadowF = 50;\r\n  light.shadow.camera.left = -shadowF;\r\n  light.shadow.camera.right = shadowF;\r\n  light.shadow.camera.top = shadowF;\r\n  light.shadow.camera.bottom = -shadowF;\r\n  scene.add(light);\r\n  scene.add(light.target);\r\n};\r\n\r\nexport const createScreen = (video) => {\r\n  const vertexShader = require(\"./shaders/screen-vertex.js\").default;\r\n  const fragmentShader = require(\"./shaders/screen-fragment.js\").default;\r\n  const videoTexture = new THREE.VideoTexture(video);\r\n  const geometry = new THREE.PlaneGeometry(10, 10);\r\n  const material = new THREE.ShaderMaterial({\r\n    uniforms: {\r\n      resolution: { value: new THREE.Vector2(1, 16 / 9) },\r\n      videoTexture: { value: videoTexture },\r\n    },\r\n    transparent: true,\r\n    vertexShader,\r\n    fragmentShader,\r\n    depthWrite: true,\r\n    depthTest: true,\r\n  });\r\n  const mesh = new THREE.Mesh(geometry, material);\r\n  mesh.position.z = -10;\r\n  mesh.position.y = 0.5;\r\n  scene.add(mesh);\r\n\r\n  const backGeo = new THREE.BoxBufferGeometry(10, 6.5, 2);\r\n  const backMaterial = new THREE.MeshStandardMaterial({ color: \"black\" });\r\n  const backMesh = new THREE.Mesh(backGeo, backMaterial);\r\n  backMesh.castShadow = true;\r\n  backMesh.position.z = -11.1;\r\n  collisionObjects.push(backMesh);\r\n  scene.add(backMesh);\r\n};\r\n\r\nconst r = 100;\r\nexport const createOrb = ({ video = gVideo(), color, n = 1 }) => {\r\n  for (var i = 0; i < n; i++) {\r\n    const rColor = randomColor();\r\n    const geometry = orbGeoRef;\r\n    // const texture = new THREE.VideoTexture(video);\r\n    const material = new THREE.MeshPhysicalMaterial({\r\n      // map: texture,\r\n      color: color ? color : rColor,\r\n      // transparent: true,\r\n      // opacity: 0.7,\r\n    });\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n\r\n    const x = Math.random() * 2 * r - (2 * r) / 2;\r\n    const y = Math.random() * r;\r\n    const z = Math.random() * 2 * r - (2 * r) / 2;\r\n    // const z = Math.random() * r * 3;\r\n    mesh.position.set(x, y, z);\r\n    mesh.rotation.y = Math.PI * 1.5;\r\n    mesh.castShadow = true;\r\n    if (video) mesh.vId = video.id.replace(\"remote-video-\", \"\");\r\n    scene.add(mesh);\r\n    orbs.push(mesh);\r\n  }\r\n};\r\n\r\nexport const removeOrb = (event) => {\r\n  const vId = event.stream.streamId;\r\n  orbs = orbs.filter((o) => o.vId !== vId);\r\n  for (let i = 0; i < scene.children.length; i++) {\r\n    const orb = scene.children[i];\r\n    if (orb.vId === vId) {\r\n      scene.remove(orb);\r\n    }\r\n  }\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nexport default function Volume({ changeVolume }) {\r\n  const canvasRef = useRef();\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const { width: w, height: h } = canvas;\r\n    ctx.rect(0, 0, w, h);\r\n    ctx.fillStyle = \"#00ffb1\";\r\n    ctx.fill();\r\n\r\n    let up = true;\r\n    canvas.onmousedown = (e) => {\r\n      up = false;\r\n    };\r\n\r\n    canvas.ontouchstart = () => (up = false);\r\n\r\n    const changeBar = (e) => {\r\n      if (!up) {\r\n        var rect = canvas.getBoundingClientRect();\r\n        const ctx = canvas.getContext(\"2d\");\r\n        const x = e.touches ? e.touches[0].clientX : e.clientX;\r\n        const coords = { x: x - rect.left };\r\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        ctx.beginPath();\r\n        ctx.rect(0, 0, coords.x, h);\r\n        ctx.fill();\r\n        changeVolume(coords.x / ctx.canvas.width);\r\n      }\r\n    };\r\n\r\n    canvas.onmousemove = changeBar;\r\n    canvas.ontouchmove = changeBar;\r\n\r\n    document.onmouseup = () => (up = true);\r\n  }, [changeVolume]);\r\n\r\n  return (\r\n    <div id=\"volume\">\r\n      <canvas ref={canvasRef} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { createOrb } from \"./ThreeFuncs\";\r\nimport Volume from \"./Volume\";\r\n\r\nfunction clamp(val, min, max) {\r\n  return val > max ? max : val < min ? min : val;\r\n}\r\n\r\nexport default function StreamControls({\r\n  videoRef,\r\n  isPlaying,\r\n  isMuted,\r\n  toggleMute,\r\n  setupAudioContext,\r\n}) {\r\n  const changeVolume = (volume) =>\r\n    (videoRef.current.volume = clamp(volume, 0, 1));\r\n\r\n  const togglePlay = () => {\r\n    const video = videoRef.current;\r\n    if (isPlaying) {\r\n      video.pause();\r\n    } else {\r\n      video.play();\r\n    }\r\n  };\r\n\r\n  const goToLive = () => {\r\n    const video = videoRef.current;\r\n    video.currentTime = video.seekable.end(0);\r\n  };\r\n\r\n  return (\r\n    <div id=\"controls-container\">\r\n      <div onClick={goToLive}>Go To Live</div>\r\n      <div onClick={togglePlay}>{isPlaying ? \"Pause\" : \"Play\"}</div>\r\n      <div onClick={toggleMute}>{isMuted ? \"Unmute\" : \"Mute\"}</div>\r\n      {/* <div onClick={createOrb}>Orb</div>\r\n      <div onClick={setupAudioContext}>AudioCtx</div> */}\r\n      {navigator.platform !== \"iPhone\" && (\r\n        <Volume changeVolume={changeVolume} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport Hls from \"hls.js\";\r\nimport fire from \"./fire.mp4\";\r\nimport StreamControls from \"./StreamControls\";\r\nconst url = \"https://ice.raptor.pizza/hls/meiosis.m3u8\";\r\nconst MAX_RETRIES = 15;\r\nexport default function ArtistStream({\r\n  createScreen,\r\n  phase,\r\n  videoRef,\r\n  setupAudioContext,\r\n  test = false,\r\n  muteOverride,\r\n}) {\r\n  const [loading, setLoading] = useState(!test);\r\n  const [retryCounter, setRetryCounter] = useState(0);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [isMuted, setIsMuted] = useState(true);\r\n\r\n  const initStream = useCallback(async () => {\r\n    const video = videoRef.current;\r\n    await fetch(url)\r\n      .then((r) => r)\r\n      .then((d) => {\r\n        if (d.status === 404) {\r\n          return false;\r\n        }\r\n        setLoading(false);\r\n        const source = url;\r\n        if (Hls.isSupported()) {\r\n          const hls = new Hls();\r\n          hls.loadSource(source);\r\n          hls.attachMedia(video);\r\n        } else {\r\n          video.src = source;\r\n        }\r\n      });\r\n  }, [videoRef]);\r\n\r\n  useEffect(() => {\r\n    setIsMuted(muteOverride);\r\n  }, [muteOverride]);\r\n\r\n  useEffect(() => {\r\n    initStream();\r\n  }, [initStream]);\r\n\r\n  const incrementCounter = useCallback(\r\n    () => setRetryCounter(retryCounter + 1),\r\n    [retryCounter]\r\n  );\r\n  useEffect(() => {\r\n    if (!loading) return;\r\n    if (retryCounter > MAX_RETRIES) {\r\n      setRetryCounter(0);\r\n      return initStream();\r\n    }\r\n    setTimeout(incrementCounter, 1000);\r\n  }, [initStream, incrementCounter, retryCounter, loading]);\r\n\r\n  useEffect(() => {\r\n    videoRef.current.src = fire;\r\n    createScreen(videoRef.current);\r\n    videoRef.current.onplay = () => setIsPlaying(true);\r\n    videoRef.current.onpause = () => setIsPlaying(false);\r\n    //  eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const video = videoRef.current;\r\n    if (isMuted) {\r\n      video.muted = true;\r\n    } else {\r\n      video.muted = false;\r\n    }\r\n  }, [isMuted, videoRef]);\r\n\r\n  const toggleMute = (e) => {\r\n    setIsMuted(!isMuted);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <video\r\n        id=\"artist-stream\"\r\n        className=\"video-js\"\r\n        crossOrigin=\"true\"\r\n        ref={videoRef}\r\n        playsInline\r\n        autoPlay\r\n        loop\r\n        controls\r\n        muted\r\n      />\r\n      {/* {phase > 0 && ( */}\r\n      <StreamControls\r\n        videoRef={videoRef}\r\n        isPlaying={isPlaying}\r\n        isMuted={isMuted}\r\n        toggleMute={toggleMute}\r\n        setupAudioContext={setupAudioContext}\r\n      />\r\n      {/* )} */}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nexport default function CtaSoundOverlay({ setPhase, setupAudioContext }) {\r\n  const [styles, setStyles] = useState();\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    const rect = ref.current.getBoundingClientRect();\r\n    setStyles({\r\n      marginLeft: -rect.width / 2 + \"px\",\r\n      marginTop: -rect.height / 2 + \"px\",\r\n      opacity: 1,\r\n    });\r\n  }, []);\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      style={{\r\n        opacity: 0,\r\n        ...styles,\r\n        transition: \"opacity 1s\",\r\n        userSelect: \"none\",\r\n        color: \"#ff0000\",\r\n      }}\r\n      className=\"centered-cta\"\r\n    >\r\n      Sound?\r\n      <div className=\"icon-cta\">\r\n        <div\r\n          onClick={() => {\r\n            setupAudioContext({ muted: false });\r\n            setPhase(2);\r\n          }}\r\n        >\r\n          <SoundIcon />\r\n        </div>\r\n        <div\r\n          onClick={() => {\r\n            setupAudioContext({ muted: true });\r\n            setPhase(2);\r\n          }}\r\n        >\r\n          <NoSoundIcon />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SoundIcon = () => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"#ff0000\"\r\n  >\r\n    <path d=\"M3 9v6h-1v-6h1zm13-7l-9 5v2.288l7-3.889v13.202l-7-3.889v2.288l9 5v-20zm-11 5h-5v10h5v-10zm13.008 2.093c.742.743 1.2 1.77 1.198 2.903-.002 1.133-.462 2.158-1.205 2.9l1.219 1.223c1.057-1.053 1.712-2.511 1.715-4.121.002-1.611-.648-3.068-1.702-4.125l-1.225 1.22zm2.142-2.135c1.288 1.292 2.082 3.073 2.079 5.041s-.804 3.75-2.096 5.039l1.25 1.254c1.612-1.608 2.613-3.834 2.616-6.291.005-2.457-.986-4.681-2.595-6.293l-1.254 1.25z\" />\r\n  </svg>\r\n);\r\n\r\nconst NoSoundIcon = () => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"#ff0000\"\r\n  >\r\n    <path d=\"M5 17h-5v-10h5v10zm2-10v10l9 5v-20l-9 5zm15.324 4.993l1.646-1.659-1.324-1.324-1.651 1.67-1.665-1.648-1.316 1.318 1.67 1.657-1.65 1.669 1.318 1.317 1.658-1.672 1.666 1.653 1.324-1.325-1.676-1.656z\" />\r\n  </svg>\r\n);\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { PointerLockControls } from \"three/examples/jsm/controls/PointerLockControls\";\r\nimport ArtistStream from \"./ArtistStream\";\r\nimport CtaSoundOverlay from \"./CtaSoundOverlay\";\r\nimport PressStart from \"./PressStart\";\r\nimport {\r\n  CAMERA_START,\r\n  collisionObjects,\r\n  createFloor,\r\n  createLight,\r\n  createOrb,\r\n  createScreen,\r\n  lerp,\r\n  mouse,\r\n  orbs,\r\n  ray,\r\n  scene,\r\n  startButton,\r\n  stats,\r\n} from \"./ThreeFuncs\";\r\n\r\nconst test = false;\r\nvar analyser;\r\nvar dataArray;\r\nvar controls;\r\nexport default function ThreeWorld() {\r\n  const [phase, setPhase] = useState(0);\r\n  const [muteOverride, setMuteOverride] = useState(true);\r\n  const worldContainerRef = useRef(undefined);\r\n  const videoRef = useRef(undefined);\r\n\r\n  useEffect(() => {\r\n    if (phase === 1) {\r\n      // worldContainerRef.current.addEventListener(\r\n      //   \"click\",\r\n      //   setupAudioContext,\r\n      //   true\r\n      // );\r\n      // worldContainerRef.current.addEventListener(\r\n      //   \"touchstart\",\r\n      //   setupAudioContext,\r\n      //   true\r\n      // );\r\n    }\r\n    if (phase === 2) {\r\n      // setupPointerControls();\r\n      try {\r\n        controls.lock();\r\n        controls.isLocked = true;\r\n      } catch (err) {\r\n        // Simulate pointer lock to start falling\r\n        controls.isLocked = true;\r\n      }\r\n    }\r\n  }, [phase]);\r\n\r\n  const setupAudioContext = ({ muted }) => {\r\n    console.log(\"audio context setup\");\r\n    setMuteOverride(muted);\r\n    if (navigator.platform === \"iPhone\") return;\r\n    var audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n    analyser = audioCtx.createAnalyser();\r\n    var source = audioCtx.createMediaElementSource(videoRef.current);\r\n    source.connect(analyser);\r\n    source.connect(audioCtx.destination);\r\n    analyser.fftSize = 512;\r\n    var bufferLength = analyser.frequencyBinCount;\r\n    dataArray = new Uint8Array(bufferLength);\r\n\r\n    worldContainerRef.current.removeEventListener(\r\n      \"click\",\r\n      setupAudioContext,\r\n      true\r\n    );\r\n    worldContainerRef.current.removeEventListener(\r\n      \"touchstart\",\r\n      setupAudioContext,\r\n      true\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (worldContainerRef.current === undefined) return;\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    const { x, y, z } = CAMERA_START;\r\n    camera.position.set(x, y, z);\r\n    camera.lookAt(0, 0, 0);\r\n    // CONTROLS\r\n    // ORBIT\r\n    // const controls = new OrbitControls(camera, worldContainerRef.current);\r\n    // controls.maxPolarAngle = Math.PI / 2;\r\n    // POINTER\r\n    var moveForward = false,\r\n      moveBackward = false,\r\n      moveLeft = false,\r\n      moveRight = false;\r\n    const velocity = new THREE.Vector3();\r\n    const direction = new THREE.Vector3();\r\n    const setupPointerControls = () => {\r\n      controls = new PointerLockControls(camera, worldContainerRef.current);\r\n      worldContainerRef.current.addEventListener(\"click\", () =>\r\n        controls.lock()\r\n      );\r\n      scene.add(controls.getObject());\r\n\r\n      function onKeyDown(e) {\r\n        switch (e.key) {\r\n          case \"w\":\r\n            moveForward = true;\r\n            break;\r\n          case \"a\":\r\n            moveLeft = true;\r\n            break;\r\n          case \"s\":\r\n            moveBackward = true;\r\n            break;\r\n          case \"d\":\r\n            moveRight = true;\r\n            break;\r\n          case \" \":\r\n            if (canJump) velocity.y += 100;\r\n            canJump = false;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      function onKeyUp(e) {\r\n        switch (e.key) {\r\n          case \"w\":\r\n            moveForward = false;\r\n            break;\r\n          case \"a\":\r\n            moveLeft = false;\r\n            break;\r\n          case \"s\":\r\n            moveBackward = false;\r\n            break;\r\n          case \"d\":\r\n            moveRight = false;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n\r\n      document.addEventListener(\"keydown\", onKeyDown, false);\r\n      document.addEventListener(\"keyup\", onKeyUp, false);\r\n    };\r\n\r\n    // END OF CONTROLS SETUP\r\n\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setClearColor(new THREE.Color(1.0, 1.0, 1.0));\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\r\n    worldContainerRef.current.appendChild(renderer.domElement);\r\n    // worldContainerRef.current.appendChild(stats.dom);\r\n    const startButtonObject = startButton();\r\n    createFloor();\r\n    createLight();\r\n\r\n    function mouseVector(e) {\r\n      const coords = { x: 0, y: 0 };\r\n      if (e instanceof TouchEvent) {\r\n        coords.x = e.touches[0].clientX;\r\n        coords.y = e.touches[0].clientY;\r\n      } else {\r\n        coords.x = e.clientX;\r\n        coords.y = e.clientY;\r\n      }\r\n      mouse.x = (coords.x / window.innerWidth) * 2 - 1;\r\n      mouse.y = -(coords.y / window.innerHeight) * 2 + 1;\r\n    }\r\n\r\n    worldContainerRef.current.addEventListener(\"touchstart\", checkClick, true);\r\n    worldContainerRef.current.addEventListener(\"click\", checkClick, true);\r\n\r\n    var started = false;\r\n    var clickAnimationRunning = false;\r\n    function checkClick(e) {\r\n      mouseVector(e);\r\n      ray.setFromCamera(mouse, camera);\r\n      const intersections = ray.intersectObjects([startButtonObject]);\r\n      if (intersections.length > 0) {\r\n        // controls.autoRotate = true;\r\n        videoRef.current.play();\r\n        // setupAudioContext();\r\n\r\n        if (!clickAnimationRunning) {\r\n          clickAnimationRunning = true;\r\n          const start = performance.now();\r\n          const currentColor = startButtonObject.material.color;\r\n          var frame;\r\n          const buttonAnimation = () => {\r\n            const now = (performance.now() - start) * 0.001;\r\n\r\n            startButtonObject.material.color.set(\r\n              currentColor.lerp(new THREE.Color(0, 0, 1), now)\r\n            );\r\n\r\n            startButtonObject.material.opacity = lerp(now - 1, 1, 0);\r\n\r\n            setPhase(1);\r\n            if (now > 2) {\r\n              started = true;\r\n              setupPointerControls();\r\n              try {\r\n                // controls.lock();\r\n                // controls.isLocked = true;\r\n              } catch (err) {\r\n                // Simulate pointer lock to start falling\r\n                // controls.isLocked = true;\r\n              }\r\n\r\n              createOrb({ n: 1000 });\r\n\r\n              return cancelAnimationFrame(frame);\r\n            }\r\n            frame = requestAnimationFrame(buttonAnimation);\r\n          };\r\n          buttonAnimation();\r\n        }\r\n        worldContainerRef.current.removeEventListener(\r\n          \"click\",\r\n          checkClick,\r\n          true\r\n        );\r\n        worldContainerRef.current.removeEventListener(\r\n          \"touchstart\",\r\n          checkClick,\r\n          true\r\n        );\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"touchstart\", handleTouchStart, false);\r\n    document.addEventListener(\"touchend\", handleTouchEnd, false);\r\n    document.addEventListener(\"touchmove\", handleTouchMove, false);\r\n\r\n    var xDown = null;\r\n    var yDown = null;\r\n\r\n    function getTouches(evt) {\r\n      return (\r\n        evt.touches || // browser API\r\n        evt.originalEvent.touches\r\n      ); // jQuery\r\n    }\r\n\r\n    const rotateStart = new THREE.Vector2();\r\n    function handleTouchStart(evt) {\r\n      const firstTouch = getTouches(evt)[0];\r\n      xDown = firstTouch.clientX;\r\n      yDown = firstTouch.clientY;\r\n      rotateStart.set(evt.touches[0].clientX, evt.touches[0].clientY);\r\n    }\r\n\r\n    const rotateEnd = new THREE.Vector2();\r\n    const rotateDelta = new THREE.Vector2();\r\n    var phi = 0;\r\n    var theta = (1 * Math.PI) / 180;\r\n    function handleTouchMove(evt) {\r\n      if (!started) return;\r\n      // evt.preventDefault();\r\n      rotateEnd.set(evt.touches[0].clientX, evt.touches[0].clientY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n      rotateStart.copy(rotateEnd);\r\n      phi =\r\n        phi +\r\n        ((2 * Math.PI * rotateDelta.y) / renderer.domElement.height) * 0.3;\r\n      theta +=\r\n        ((2 * Math.PI * rotateDelta.x) / renderer.domElement.width) * 0.5;\r\n      if (!xDown || !yDown) {\r\n        return;\r\n      }\r\n      var xUp = evt.touches[0].clientX;\r\n      var yUp = evt.touches[0].clientY;\r\n      var xDiff = xDown - xUp;\r\n      var yDiff = yDown - yUp;\r\n\r\n      if (Math.abs(xDiff) > Math.abs(yDiff)) {\r\n        /*most significant*/\r\n        if (xDiff > 0) {\r\n          /* left swipe */\r\n          // look(evt);\r\n        } else {\r\n          /* right swipe */\r\n          // look(evt);\r\n        }\r\n      } else {\r\n        if (yDiff > 0) {\r\n          /* up swipe */\r\n          moveBackward = true;\r\n        } else {\r\n          /* down swipe */\r\n          moveForward = true;\r\n        }\r\n      }\r\n      /* reset values */\r\n      xDown = null;\r\n      yDown = null;\r\n    }\r\n\r\n    function handleTouchEnd(evt) {\r\n      moveForward = false;\r\n      moveBackward = false;\r\n    }\r\n\r\n    var scope = {};\r\n    scope.minPolarAngle = 0;\r\n    scope.maxPolarAngle = Math.PI;\r\n    var euler = new THREE.Euler(0, 0, 0, \"YXZ\");\r\n\r\n    const bbox = new THREE.Box3();\r\n    let frame;\r\n    var canJump = true;\r\n    var prevTime;\r\n    var orientation = new THREE.Quaternion();\r\n    var previousPhi;\r\n    var previousTheta;\r\n    function animate() {\r\n      frame = requestAnimationFrame(animate);\r\n\r\n      if (phi === previousPhi && theta === previousTheta) {\r\n      } else if (started) {\r\n        previousPhi = phi;\r\n        previousTheta = theta;\r\n        euler.set(phi, theta, 0, \"YXZ\");\r\n        orientation.setFromEuler(euler);\r\n        camera.quaternion.copy(orientation);\r\n      }\r\n\r\n      // camera.position.x = radius * Math.cos(angle);\r\n      // camera.position.z = radius * Math.sin(angle);\r\n      // POINTER CONTROLS MOVEMENTS\r\n      const time = performance.now();\r\n      if (controls && controls.isLocked) {\r\n        direction.z = Number(moveForward) - Number(moveBackward);\r\n        direction.x = Number(moveRight) - Number(moveLeft);\r\n        direction.normalize(); // this ensures consistent movements in all directions\r\n\r\n        const delta = (time - prevTime) / 1000;\r\n        velocity.x -= velocity.x * 10.0 * delta;\r\n        velocity.z -= velocity.z * 10.0 * delta;\r\n\r\n        // find intersections\r\n        const controlObject = controls.getObject();\r\n        const oldPosition = new THREE.Vector3();\r\n        oldPosition.copy(controlObject.position);\r\n\r\n        velocity.y -= 9.8 * 10.0 * delta; // 100.0 = mass\r\n\r\n        if (moveForward || moveBackward)\r\n          velocity.z -= direction.z * 400.0 * delta;\r\n        if (moveLeft || moveRight) velocity.x -= direction.x * 400.0 * delta;\r\n\r\n        controls.moveRight(-velocity.x * delta);\r\n        controls.moveForward(-velocity.z * delta);\r\n\r\n        const sphere = new THREE.Sphere(controlObject.position, 2);\r\n\r\n        // intersection\r\n        if (collisionObjects.length > 0) {\r\n          const object = collisionObjects[0];\r\n          object.geometry.computeBoundingBox();\r\n          bbox\r\n            .copy(object.geometry.boundingBox)\r\n            .applyMatrix4(object.matrixWorld);\r\n          const intersections = sphere.intersectsBox(bbox);\r\n          if (intersections) {\r\n            velocity.y = Math.max(0, velocity.y);\r\n            if (controls.getObject().position.y === 0)\r\n              controlObject.position.copy(oldPosition);\r\n            canJump = true;\r\n          }\r\n        }\r\n        controls.getObject().position.y += velocity.y * delta; // new behavior\r\n        if (controls.getObject().position.y < 0) {\r\n          velocity.y = 0;\r\n          controls.getObject().position.y = 0;\r\n\r\n          canJump = true;\r\n        }\r\n      }\r\n      prevTime = time;\r\n\r\n      // END OF POINTER CONTROLS MOVEMENTS\r\n\r\n      if (analyser) {\r\n        analyser.getByteFrequencyData(dataArray);\r\n      }\r\n      for (let i = 0; i < orbs.length; i++) {\r\n        orbs[i].rotation.y += 0.01;\r\n        const wave = Math.sin(time * 0.001 + i);\r\n        orbs[i].scale.set(wave, wave, wave);\r\n        if (analyser) {\r\n          const d = dataArray[i % 256] / 100;\r\n          orbs[i].scale.set(d, d, d);\r\n        }\r\n      }\r\n\r\n      renderer.render(scene, camera);\r\n      stats.update();\r\n      //controls.update();\r\n    }\r\n    animate();\r\n\r\n    const onWindowResize = () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n\r\n    window.addEventListener(\"resize\", onWindowResize, false);\r\n\r\n    return () => {\r\n      cancelAnimationFrame(frame);\r\n      window.removeEventListener(\"resize\", onWindowResize, false);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ width: \"100%\", height: \"100%\" }} ref={worldContainerRef}>\r\n      {/* <PressStart phase={phase} /> */}\r\n      {phase === 1 && (\r\n        <CtaSoundOverlay\r\n          setupAudioContext={setupAudioContext}\r\n          setPhase={setPhase}\r\n        />\r\n      )}\r\n      <ArtistStream\r\n        createScreen={createScreen}\r\n        phase={phase}\r\n        videoRef={videoRef}\r\n        test={test}\r\n        setupAudioContext={setupAudioContext}\r\n        muteOverride={muteOverride}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./index.scss\";\nimport ThreeWorld from \"./ThreeWorld\";\n\nexport default function App() {\n  return (\n    <div>\n      <ThreeWorld />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}